const Bot = require('node-telegram-bot-api');
const nodemailer = require('nodemailer');
const axios = require('axios');

const BOT_TOKEN = process.env.TELEGRAM_TOKEN;
const GMAIL_USER = process.env.GMAIL_USER;
const GMAIL_APP_PASSWORD = process.env.GMAIL_APP_PASSWORD;
const VERCEL_URL = process.env.VERCEL_URL || 'https://spasibo.vercel.app';

const bot = new Bot(BOT_TOKEN, { webHook: true });
const userState = new Map();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—á—Ç—ã
const mailTransporter = nodemailer.createTransporter({
  service: 'gmail',
  auth: {
    user: GMAIL_USER,
    pass: GMAIL_APP_PASSWORD
  }
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
bot.setWebHook(`${VERCEL_URL}/api/bot`);

module.exports = async (req, res) => {
  const { method, url } = req;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ Telegram
  if (method === 'POST' && url === '/api/bot') {
    try {
      const { body } = req;
      
      if (body.message) {
        const chatId = body.message.chat.id;
        const text = body.message.text;
        const voice = body.message.voice;

        if (text === '/start') {
          userState.delete(chatId);
          await bot.sendMessage(
            chatId, 
            `‚ù§Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç "–°–ø–∞—Å–∏–±–æ"!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é, –∑–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è.`,
            { 
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [[
                  { text: "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app: { url: VERCEL_URL } }
                ]]
              }
            }
          );
        } 
        else if (voice) {
          userState.set(chatId, { voiceFileId: voice.file_id });
          await bot.sendMessage(chatId, "üéµ –ì–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è:");
        } 
        else if (text && text.includes('@')) {
          const userData = userState.get(chatId);
          
          if (userData?.voiceFileId) {
            await bot.sendMessage(chatId, "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞—à—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å...");
            
            try {
              const fileLink = await bot.getFileLink(userData.voiceFileId);
              
              // –û—Ç–ø—Ä–∞–≤–∫–∞ email
              await mailTransporter.sendMail({
                from: `"–ü—Ä–æ–µ–∫—Ç –°–ø–∞—Å–∏–±–æ" <${GMAIL_USER}>`,
                to: text,
                subject: "üíå –í–∞–º –ø—Ä–∏—à–ª–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!",
                html: `
                  <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #e91e63;">‚ù§Ô∏è –í–∞–º –ø—Ä–∏—à–ª–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é!</h2>
                    <p>–ö—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç —Å–∫–∞–∑–∞—Ç—å –≤–∞–º "–°–ø–∞—Å–∏–±–æ" –ø—Ä–æ—Å—Ç–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã –µ—Å—Ç—å –≤ –∏—Ö –∂–∏–∑–Ω–∏.</p>
                    <div style="background: #f9f9f9; padding: 20px; border-radius: 10px; margin: 20px 0;">
                      <p>üéµ <strong>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</strong></p>
                      <audio controls style="width: 100%; margin: 10px 0;">
                        <source src="${fileLink}" type="audio/ogg">
                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã.
                      </audio>
                      <p><a href="${fileLink}" style="color: #e91e63;">–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è</a></p>
                    </div>
                    <p><em>–° –ª—é–±–æ–≤—å—é –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ "–°–ø–∞—Å–∏–±–æ" ‚ù§Ô∏è</em></p>
                  </div>
                `
              });

              await bot.sendMessage(chatId, `‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ ${text}\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ –º–∏—Ä –¥–æ–±—Ä–µ–µ! ‚ù§Ô∏è`);
              userState.delete(chatId);
              
            } catch (error) {
              console.error('Error:', error);
              await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            }
          }
        }
      }
      
      res.status(200).json({ ok: true });
    } catch (error) {
      console.error('Webhook error:', error);
      res.status(200).json({ ok: false });
    }
  } 
  // Health check –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
  else {
    res.status(200).json({ status: 'OK', project: 'Spasibo Bot' });
  }
};