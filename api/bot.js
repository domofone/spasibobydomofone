const Bot = require('node-telegram-bot-api');
const nodemailer = require('nodemailer');
const axios = require('axios');

const BOT_TOKEN = process.env.TELEGRAM_TOKEN;
const GMAIL_USER = process.env.GMAIL_USER;
const GMAIL_APP_PASSWORD = process.env.GMAIL_APP_PASSWORD;
const VERCEL_URL = process.env.VERCEL_URL || 'https://spasibo.vercel.app';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –≤–µ–±—Ö—É–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
const bot = process.env.VERCEL_ENV === 'production' 
  ? new Bot(BOT_TOKEN, { webHook: true })
  : new Bot(BOT_TOKEN, { polling: false });

const userState = new Map();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—á—Ç—ã
const mailTransporter = nodemailer.createTransporter({
  service: 'gmail',
  auth: {
    user: GMAIL_USER,
    pass: GMAIL_APP_PASSWORD
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞
async function setWebhook() {
  try {
    await bot.setWebHook(`${VERCEL_URL}/api/bot`);
    console.log('Webhook set successfully');
  } catch (error) {
    console.error('Error setting webhook:', error);
  }
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if (process.env.VERCEL_ENV === 'production') {
  setWebhook();
}

module.exports = async (req, res) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  const { method, url } = req;
  
  console.log('Incoming request:', { method, url });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ Telegram
  if (method === 'POST' && url === '/api/bot') {
    try {
      const { body } = req;
      console.log('Telegram webhook body:', JSON.stringify(body, null, 2));

      if (!body.message) {
        return res.status(200).json({ ok: true, message: 'No message in update' });
      }

      const chatId = body.message.chat.id;
      const text = body.message.text;
      const voice = body.message.voice;
      const firstName = body.message.from.first_name;

      console.log('Processing message:', { chatId, text, voice: !!voice });

      // –ö–æ–º–∞–Ω–¥–∞ /start
      if (text === '/start' || text?.includes('/start')) {
        userState.delete(chatId);
        await bot.sendMessage(
          chatId, 
          `‚ù§Ô∏è –ü—Ä–∏–≤–µ—Ç, ${firstName || '–¥—Ä—É–≥'}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç "–°–ø–∞—Å–∏–±–æ"!\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –¥–æ—Ä–æ–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.\n\nüé§ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n1. –ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é\n2. –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ\n3. –£–∫–∞–∂–∏ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n4. –Ø –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n–ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ üéµ`,
          { 
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [[
                { text: "üì± –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app: { url: VERCEL_URL } }
              ]]
            }
          }
        );
      } 
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      else if (voice) {
        console.log('Voice message received, file_id:', voice.file_id);
        userState.set(chatId, { 
          voiceFileId: voice.file_id,
          timestamp: Date.now()
        });
        
        await bot.sendMessage(
          chatId, 
          "üéµ –û—Ç–ª–∏—á–Ω–æ! –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ **email –ø–æ–ª—É—á–∞—Ç–µ–ª—è**, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–≤–æ—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å:",
          { parse_mode: 'Markdown' }
        );
      } 
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ email
      else if (text && text.includes('@') && text.includes('.')) {
        const userData = userState.get(chatId);
        console.log('Email received:', text, 'User data:', userData);
        
        if (userData?.voiceFileId) {
          await bot.sendMessage(chatId, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å...");
          
          try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            const file = await bot.getFile(userData.voiceFileId);
            const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;
            
            console.log('File URL:', fileUrl);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ email
            await mailTransporter.sendMail({
              from: `"–ü—Ä–æ–µ–∫—Ç –°–ø–∞—Å–∏–±–æ" <${GMAIL_USER}>`,
              to: text,
              subject: "üíå –í–∞–º –ø—Ä–∏—à–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å!",
              html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                  <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 2px; border-radius: 15px;">
                    <div style="background: white; padding: 30px; border-radius: 13px; text-align: center;">
                      <h1 style="color: #e91e63; margin-bottom: 20px;">‚ù§Ô∏è –í–∞–º –ø—Ä–∏—à–ª–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é!</h1>
                      <p style="font-size: 16px; margin-bottom: 25px; color: #333;">
                        –ö—Ç–æ-—Ç–æ –æ—á–µ–Ω—å —Ü–µ–Ω–∏—Ç –≤–∞—Å –∏ —Ö–æ—á–µ—Ç —Å–∫–∞–∑–∞—Ç—å "–°–ø–∞—Å–∏–±–æ" –ø—Ä–æ—Å—Ç–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã –µ—Å—Ç—å –≤ –∏—Ö –∂–∏–∑–Ω–∏.
                      </p>
                      
                      <div style="background: #f9f9f9; padding: 25px; border-radius: 10px; margin: 25px 0;">
                        <p style="font-weight: bold; color: #e91e63; margin-bottom: 15px;">üéµ –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</p>
                        <audio controls style="width: 100%; margin: 15px 0;">
                          <source src="${fileUrl}" type="audio/ogg">
                          –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã.
                        </audio>
                        <p style="margin-top: 10px;">
                          <a href="${fileUrl}" style="color: #e91e63; text-decoration: none; font-weight: bold;">üì• –°–∫–∞—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</a>
                        </p>
                      </div>
                      
                      <p style="font-style: italic; color: #666; margin-top: 25px;">
                        –° –ª—é–±–æ–≤—å—é –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ "–°–ø–∞—Å–∏–±–æ" ‚ù§Ô∏è<br>
                        <small>–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ. –¶–µ–Ω–∏—Ç–µ —Ç–µ—Ö, –∫—Ç–æ –≤–∞—Å –æ–∫—Ä—É–∂–∞–µ—Ç!</small>
                      </p>
                    </div>
                  </div>
                </div>
              `
            });

            console.log('Email sent successfully to:', text);

            await bot.sendMessage(
              chatId, 
              `‚úÖ **–ì–æ—Ç–æ–≤–æ!** –¢–≤–æ—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ email:\n\nüìß ${text}\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è –¥–æ–±—Ä–æ–º –∏ –¥–µ–ª–∞–µ—à—å –º–∏—Ä —Ç–µ–ø–ª–µ–µ! ‚ù§Ô∏è\n\n–•–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å? –ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!`,
              { parse_mode: 'Markdown' }
            );
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userState.delete(chatId);
            
          } catch (error) {
            console.error('Error processing voice message:', error);
            await bot.sendMessage(
              chatId, 
              "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å email –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–æ—Ä–æ—á–µ."
            );
          }
        } else {
          await bot.sendMessage(
            chatId, 
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π –∑–Ω–∞—á–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ Telegram."
          );
        }
      }
      // –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç
      else if (text) {
        await bot.sendMessage(
          chatId, 
          `üìù –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å:\n1. –ó–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–∂–º–∏ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π –∑–Ω–∞—á–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ üìé)\n2. –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ\n3. –£–∫–∞–∂–∏ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n\n–ò–ª–∏ –æ—Ç–∫—Ä–æ–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ üëá`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [[
                { text: "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app: { url: VERCEL_URL } }
              ]]
            }
          }
        );
      }
      
      res.status(200).json({ ok: true });
    } catch (error) {
      console.error('Webhook error:', error);
      res.status(200).json({ ok: false, error: error.message });
    }
  } 
  // Health check –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
  else if (method === 'GET' && url === '/api/bot') {
    try {
      const webhookInfo = await bot.getWebHookInfo();
      res.status(200).json({ 
        status: 'OK', 
        project: 'Spasibo Bot',
        bot: '@Spasibotebe_bot',
        webhook: webhookInfo
      });
    } catch (error) {
      res.status(200).json({ 
        status: 'ERROR', 
        error: error.message 
      });
    }
  }
  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
  else if (method === 'POST' && url === '/api/set-webhook') {
    try {
      await setWebhook();
      res.status(200).json({ ok: true, message: 'Webhook set successfully' });
    } catch (error) {
      res.status(500).json({ ok: false, error: error.message });
    }
  }
  else {
    res.status(404).json({ error: 'Not found' });
  }
};
