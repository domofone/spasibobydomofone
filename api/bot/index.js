import { Telegraf } from 'telegraf';
import { createReadStream, writeFileSync } from 'fs';
import { tmpdir } from 'os';
import { join } from 'path';

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_TOKEN);

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞—É–¥–∏–æ
const audioStorage = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', (ctx) => {
  const args = ctx.message.text.split(' ')[1];
  if (args && audioStorage.has(args)) {
    const audioFileId = audioStorage.get(args);
    ctx.replyWithVoice({ source: audioFileId });
    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    audioStorage.delete(args);
  } else {
    ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç "–°–ø–∞—Å–∏–±–æ".\n\n–û—Ç–∫—Ä–æ–π Mini App, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
export default async function handler(req, res) {
  if (req.method === 'POST') {
    const body = req.body;

    if (body.type === 'send_voice_email') {
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        const audioBuffer = Buffer.from(body.audioData, 'base64');
        const tempFilePath = join(tmpdir(), `voice_${body.audioId}.webm`);
        writeFileSync(tempFilePath, audioBuffer);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        audioStorage.set(body.audioId, tempFilePath);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        const response = await fetch('/api/send-email', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            to: body.email,
            subject: '–¢–µ–±–µ —Å–ø–∞—Å–∏–±–æ! ‚ù§Ô∏è',
            body: `–ü—Ä–∏–≤–µ—Ç!\n\n–ö—Ç–æ-—Ç–æ —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Å–ø–∞—Å–∏–±–æ. –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–æ—Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\nhttps://t.me/YOUR_BOT_USERNAME?start=${body.audioId}\n\n–° —Ç–µ–ø–ª–æ–º,\n–¢–≤–æ–π –¥—Ä—É–≥ ‚ù§Ô∏è`
          })
        });

        const result = await response.json();

        if (result.success) {
          res.status(200).json({ success: true });
        } else {
          res.status(500).json({ success: false, error: result.error });
        }
      } catch (error) {
        res.status(500).json({ success: false, error: error.message });
      }
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram webhook
      try {
        await bot.handleUpdate(body);
        res.status(200).json({ success: true });
      } catch (error) {
        res.status(500).json({ success: false, error: error.message });
      }
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}

export const config = {
  api: {
    bodyParser: false,
  },
};